[
  {
    "id": 1,
    "title": "Introdu√ß√£o ao React Hooks",
    "category": "React",
    "excerpt": "Aprenda os fundamentos dos React Hooks e como utiliz√°-los para simplificar seu c√≥digo.",
    "content": "<p>React Hooks permitem usar estado e ciclo de vida sem classes...</p>",
    "tags": ["React", "Hooks", "JavaScript"],
    "image": "images/blog/react-hooks.jpg",
    "date": "2025-01-15",
    "readTime": "5 min"
  },
  {
  "titulo": "Introdu√ß√£o ao React Hooks",
  "data_publicacao": "2025-01-15",
  "tempo_leitura": "5 min",
  "conteudo": "Os React Hooks revolucionaram a forma como escrevemos componentes React ao permitir o uso de estado e ciclo de vida sem a necessidade de classes. Introduzidos na vers√£o 16.8, os Hooks trouxeram uma maneira mais direta e funcional de gerenciar a l√≥gica de estado e efeitos colaterais em componentes funcionais.",
  "secoes": [
    {
      "titulo": "O que s√£o React Hooks?",
      "conteudo": "React Hooks s√£o fun√ß√µes especiais que permitem 'conectar' recursos do React como estado e ciclo de vida a componentes funcionais. Eles resolvem v√°rios problemas comuns encontrados no desenvolvimento com React, como a complexidade de reutilizar l√≥gica de estado entre componentes e a dificuldade de entender componentes de classe."
    },
    {
      "titulo": "Principais Hooks e seus usos",
      "subsecoes": [
        {
          "titulo": "useState",
          "conteudo": "O Hook useState √© um dos mais utilizados, permitindo adicionar estado a componentes funcionais:",
          "exemplo": "import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Voc√™ clicou {count} vezes</p>\n      <button onClick={() => setCount(count + 1)}>\n        Clique aqui\n      </button>\n    </div>\n  );\n}"
        },
        {
          "titulo": "useEffect",
          "conteudo": "O Hook useEffect permite executar efeitos colaterais em componentes funcionais, substituindo componentDidMount, componentDidUpdate e componentWillUnmount:",
          "exemplo": "import React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    // Buscar dados quando o componente montar\n    fetch('https://api.example.com/data')\n      .then(response => response.json())\n      .then(data => setData(data));\n    \n    // Limpeza (equivalente a componentWillUnmount)\n    return () => {\n      console.log('Componente ser√° desmontado');\n    };\n  }, []); // Array de depend√™ncias vazio = executa apenas uma vez\n}"
        },
        {
          "titulo": "useContext",
          "conteudo": "O Hook useContext facilita o acesso ao contexto do React sem a necessidade de componentes aninhados:",
          "exemplo": "import React, { useContext } from 'react';\n\nconst ThemeContext = React.createContext('light');\n\nfunction ThemedButton() {\n  const theme = useContext(ThemeContext);\n  \n  return <button className={theme}>Bot√£o com tema</button>;\n}"
        }
      ]
    },
    {
      "titulo": "Vantagens dos Hooks",
      "itens": [
        "C√≥digo mais limpo: Elimina a necessidade de classes e do binding de this",
        "Reutiliza√ß√£o de l√≥gica: Custom Hooks permitem extrair e compartilhar l√≥gica entre componentes",
        "Organiza√ß√£o melhor: Agrupar l√≥gica relacionada em vez de dividi-la entre m√©todos de ciclo de vida"
      ]
    },
    {
      "titulo": "Regras dos Hooks",
      "itens": [
        "Chame Hooks apenas no n√≠vel superior: N√£o use Hooks dentro de loops, condi√ß√µes ou fun√ß√µes aninhadas",
        "Chame Hooks apenas em componentes React: Ou em custom Hooks"
      ]
    },
    {
      "titulo": "Criando seu pr√≥prio Hook",
      "conteudo": "Custom Hooks permitem extrair l√≥gica de componente para fun√ß√µes reutiliz√°veis:",
      "exemplo": "function useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n// Usando o custom Hook\nfunction MyComponent() {\n  const [name, setName] = useLocalStorage('name', 'Jo√£o');\n  return <input value={name} onChange={e => setName(e.target.value)} />;\n}"
    },
    {
      "titulo": "Conclus√£o",
      "conteudo": "React Hooks representam uma evolu√ß√£o significativa no ecossistema React, oferecendo uma API mais simples e poderosa para gerenciar estado e efeitos colaterais. Ao dominar os Hooks, voc√™ pode escrever c√≥digo mais limpo, modular e reutiliz√°vel.\n\n√Ä medida que voc√™ se familiariza com os Hooks b√°sicos, explore Hooks adicionais como useReducer, useCallback, useMemo e useRef para aproveitar todo o potencial dessa funcionalidade."
    }
  ],
  "tags": ["React", "Hooks", "JavaScript"]
},
{
  "id": 2,
  "title": "Os 5 H√°bitos de Programadores de Sucesso",
  "slug": "os-5-habitos-programadores-sucesso",
  "excerpt": "Descubra as pr√°ticas que separam os bons programadores dos melhores.",
  "category": "Carreira",
  "tags": ["produtividade", "programa√ß√£o", "carreira"],
  "author": "Ismael Nunes",
  "date": "2025-08-29",
  "readTime": "7 min de leitura",
  "status": "published",
  "image": "images/habitos-programacao.jpg",
  "content": "# Os 5 H√°bitos de Programadores de Sucesso\n\nüìÖ 29 de Agosto, 2025 ‚Ä¢ ‚è±Ô∏è 7 min de leitura ‚Ä¢ Categoria: **Carreira**\n\n![Imagem capa - h√°bitos de programadores](images/habitos-programacao.jpg)\n\n---\n\n## Introdu√ß√£o\nNo mundo da programa√ß√£o, dominar linguagens e frameworks √© apenas uma parte da jornada. O que realmente diferencia os bons programadores dos grandes profissionais s√£o os **h√°bitos** que cultivam no dia a dia.\n\nNeste artigo, voc√™ vai descobrir 5 pr√°ticas que podem transformar sua carreira e coloc√°-lo em outro patamar como desenvolvedor.\n\n---\n\n## 1. Estudo Cont√≠nuo\nA tecnologia evolui em uma velocidade impressionante. Frameworks mudam, novas ferramentas surgem e paradigmas se transformam. Programadores de sucesso entendem que o **aprendizado nunca acaba**.\n\nüìå **Exemplo pr√°tico**: Reserve 30 minutos por dia para estudar algo novo ‚Äî pode ser um curso online, documenta√ß√£o oficial ou at√© pequenos experimentos no GitHub.\n\n---\n\n## 2. C√≥digo Limpo e Leg√≠vel\nN√£o basta apenas ‚Äúfuncionar‚Äù. Um bom c√≥digo precisa ser **leg√≠vel, organizado e f√°cil de manter**.\n\n‚úÖ Use nomes de vari√°veis claros.  \n‚úÖ Escreva fun√ß√µes pequenas e objetivas.  \n‚úÖ Documente trechos importantes.  \n\nüìå **Exemplo pr√°tico**: ao inv√©s de `x` ou `y`, prefira nomes como `totalVendas` ou `mediaNotas`.\n\n---\n\n## 3. Controle de Vers√£o\nNenhum programador de sucesso trabalha sem **Git**. Al√©m de salvar vers√µes, ele facilita o trabalho em equipe, hist√≥rico de altera√ß√µes e deploys organizados.\n\nüìå **Exemplo pr√°tico**: adote uma rotina de commits claros e frequentes, como:  \n`git commit -m \"Adiciona valida√ß√£o de login com JWT\"`\n\n---\n\n## 4. Networking e Comunidade\nParticipar de comunidades, eventos e f√≥runs amplia sua vis√£o e acelera seu crescimento. Muitas oportunidades de emprego e projetos surgem por meio dessas conex√µes.\n\nüìå **Exemplo pr√°tico**: compartilhe conhecimento no LinkedIn, participe de meetups ou contribua em projetos open source.\n\n---\n\n## 5. Cuidar da Sa√∫de Mental e F√≠sica\nProgramar exige foco e concentra√ß√£o, mas tamb√©m pede equil√≠brio. Um desenvolvedor esgotado dificilmente ter√° boa performance.\n\n‚úÖ Fa√ßa pausas regulares.  \n‚úÖ Mantenha uma boa postura ao trabalhar.  \n‚úÖ Pratique exerc√≠cios e preserve seu tempo de lazer.  \n\nüìå **Exemplo pr√°tico**: utilize a t√©cnica Pomodoro (25min de foco + 5min de pausa) para manter a produtividade sem sobrecarregar sua mente.\n\n---\n\n## Conclus√£o\nSer um programador de sucesso vai muito al√©m de aprender a pr√≥xima linguagem da moda. Os **h√°bitos di√°rios** s√£o o que realmente constroem uma carreira s√≥lida e diferenciada.\n\nComece pequeno: escolha um desses h√°bitos e coloque em pr√°tica ainda hoje. Em pouco tempo, voc√™ notar√° uma grande diferen√ßa nos seus resultados e no reconhecimento do seu trabalho.\n"
}
]
